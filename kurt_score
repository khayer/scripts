#!/usr/bin/env ruby

usage =<<EOF

  #{$0} combined.vcf target_pos control,pos,ition,s
 -----------------------------------------
  Kurt Score is definied as:
    total # of bases examined / total # bases on chromosome
    in a 1MB window

  format out:

  position score
  ...
  500000 50
  500001 50
  500002 51
  ...
EOF

# Functions:
def snp_exist?(info)
  !(info =~ /\.\/\./) && !(info =~ /0\/0/)
end

def snp_homo?(info)
  (info =~ /1\/1/) || (info =~ /2\/2/) || (info =~ /3\/3/)
end

# _ Main _:
if ARGV.length != 3
  puts usage
  exit
end

combined_vcf = ARGV[0]
target_pos = ARGV[1].to_i + 8
control_positions = ARGV[2].split(",").map {|ele| ele.to_i + 8}

window_size = 660000
window_first = window_size
window_second = window_size/2

homozygous_snps_first_window = 0
homozygous_snps_second_window = 0
dummy = false

File.open(combined_vcf).each do |line|
  next if line =~ /^#/  # getting rid of header lines
  line.chomp!
  line = line.split("\t")
  target_info = line[target_pos]
  next if target_info =~ /\.\/\./ # If target_info = "./." we move on
  #next unless snp_homo?(target_info)
  target_info = target_info.split(":")
  next unless target_info[2].to_i > 5
  target_genotype = target_info[0]

  all_genotypes = Array.new()
  all_read_numbers = Array.new(8,0)
  coverage = 0
  all_pos = [control_positions , target_pos].flatten
  all_pos.each do |current_sample_number|
    unless line[current_sample_number] =~ /\.\/\./
      next unless line[current_sample_number].split(":")[2].to_i > 5
      all_genotypes << line[current_sample_number].split(":")[0]
      line[current_sample_number].split(":")[1].split(",").each_with_index do |number, index|
        all_read_numbers[index] += number.to_i
      end
      coverage += line[current_sample_number].split(":")[2].to_i
    end
  end

  fraction = (all_read_numbers.max.to_f / coverage.to_f)
  next unless fraction < 0.9

  if snp_homo?(target_info[0])
    homozygous_snps_first_window += 1
    homozygous_snps_second_window += 1
  else
    homozygous_snps_first_window -= 1
    homozygous_snps_second_window -= 1
  end


  position = line[1].to_i

  state = "nothing"
  if position > window_second
    state = "second_done"
  end
  if position > window_first
    state = "first_done"
  end

  case state
   when "second_done"

    if dummy
      puts "#{window_second}\t#{homozygous_snps_second_window}"
      homozygous_snps_second_window = 0
      window_second += window_size
    else
      window_second += window_size
      homozygous_snps_second_window = 0
      dummy = true
    end

   when "first_done"
    puts "#{window_first}\t#{homozygous_snps_first_window}"
    homozygous_snps_first_window = 0
    window_first += window_size
   end
end
