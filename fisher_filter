#!/usr/bin/env ruby
require 'spreadsheet'
require 'csv'

### Functions #######################################################
#####################################################################

def get_sample_names(vcf_file)
  sample_names = []
  File.open(vcf_file).each do |line|
    next unless line =~ /^\#CHROM/
    sample_names = line.split("FORMAT")[1].split("\t")
    break
  end
  sample_names
end

def snp?(genotype)
  !(genotype =~ /0\/0/ || genotype =~ /\.\/\./)
end

def heterozygous?(genotype)
  (genotype =~ /0\/1/ || genotype =~ /0\/2/ || genotype =~ /1\/2/)
end

def homozygous?(genotype)
  (genotype =~ /1\/1/ || genotype =~ /2\/2/ || genotype =~ /3\/3/)
end

def make_link(pos, chromosome)
  chromosome = chromosome.delete("chr")
  pos_l = (pos - 10).to_s
  pos_r = (pos + 10).to_s
  link = "http://www.ensembl.org/Danio_rerio/Location/View?r=#{chromosome}:#{pos_l}-#{pos_r}"
end

def make_link_refSeq(snpeff_transcript_id)
  snpeff_transcript_id = snpeff_transcript_id.split(".")[0]
  link = "http://www.ncbi.nlm.nih.gov/nuccore/#{snpeff_transcript_id}"
end

def make_link_ensembl(ensemble_id)
  link = "http://useast.ensembl.org/Danio_rerio/Gene/Summary?db=core;g=#{ensemble_id}"
end

def snp_unique_old?(genotype_target, sample_genotypes,sample_genotypes_quality)
  k = true
  sample_genotypes.each_with_index do |genotype,i|
    if (genotype == genotype_target) &&
      (sample_genotypes_quality[i] >= $quality_cutoff)
      k = false
      break
    end
  end
  k
end

def snp_unique?(genotype_target, sample_genotypes,sample_genotypes_quality)
  k = true
  sample_genotypes.each_with_index do |genotype,i|
    if (!(genotype =~ /0\/0/) &&
      (sample_genotypes_quality[i] >= $quality_cutoff)) ||
      (genotype_target == genotype)
      k = false
      break
    end
  end
  k
end

#def get_score(chromosome, pos, seg)
#  lower = pos - 25000
#  upper = pos + 25000
#  scores = `grep -w #{chromosome} #{seg}| awk '$3 > #{lower} {print $0}' | awk '$3 < #{upper} {print $0}'`
#  highest = 0
#  scores = scores.split("\n")
#  scores.each do |line|
#    line = line.split("\t")
#    highest = line[-1].to_i if line[-1].to_i > highest
#  end
#  highest
#end


### Main ############################################################
#####################################################################

usage =<<EOF

      #{$0} in.vcf out.xls target sib control

      ------------------------------------------------------
      * in.vcf   :: with header for sample_names
      * out.xls  :: output file with filtered for target
      * target   :: position in vcf file
      * sib      :: position in vcf file
      * control  :: positions of TLF and Wik
      ------------------------------------------------------

      Searches for mutations that are homozygous for
      the mutant while heterozygous for the sib.
      They mutation should not be present in either TLF or
      Wik.

                                                   by khayer

EOF

if ARGV.length != 5
  puts usage
  exit
end

### PARAMETERS
$x_cutoff = 8
$quality_cutoff = 1.0
##############

### PREPARATION
vcf_file        = ARGV[0]
xls_doc         = ARGV[1]
target_number   = ARGV[2].to_i + 8
sib_number      = ARGV[3].to_i + 8
control_numbers = ARGV[4].split(",").map {|ele| ele.to_i + 8}

sample_order = [ARGV[2],ARGV[3],ARGV[4].split(",")].flatten
sample_order = sample_order.map {|ele| ele.to_i}
sample_names = get_sample_names(vcf_file)

book = Spreadsheet::Workbook.new
sheet1 = book.create_worksheet
sheet1.row(0).push '#CHROM','POS','REF','ALT','Read Depth', 'Impact', 'Effect', 'Codon Change', 'Gen Name','Phast Cons','PC-Start','PC-End' ,'Score'
sample_order.each do |order|
  sheet1.row(0).push "#{sample_names[order]}_Genotype", "#{sample_names[order]}_Allele_Depth", "#{sample_names[order]}_Read_Depth","#{sample_names[order]}_GT_Quality"
end
format1 = Spreadsheet::Format.new :weight => :bold
sheet1.row(0).default_format = format1
###############

### MAIN
i = 1
dummy = ""
locator = Hash.new()
number_of_samples = sample_names.length()
current_chromosome = "dummy"

File.open(vcf_file).each do |line|
  # Getting rid of header lines
  next if line =~ /^#/

  line  = line.split("\t")
  chromosome = line[0]
  target_fields = line[target_number].split(":")
  next unless snp?(target_fields[0])
  next unless target_fields[3].to_i >= 50

  if chromosome != current_chromosome
    puts chromosome
    current_chromosome = chromosome
  end

  #if heterozygous?(target_fields[0])
  #  allele_depth = target_fields[1].split(",")
  #  # There should be more reads with mutation than without
  #  next if (allele_depth[0].to_i) >= allele_depth[1].to_i
  #  # There should be at least X reads to cover this location
  #  next unless target_fields[2].to_i >= $x_cutoff
  #else
  #  next unless
  #    homozygous?(target_fields[0]))
  #end

  next unless homozygous?(target_fields[0]) &&
    (target_fields[2].to_i >= $x_cutoff)

  sib_fields = line[sib_number].split(":")
  next unless heterozygous?(sib_fields[0])

  #AC=2;AF=1.00;AN=2;BaseQRankSum=1.162;DP=31;Dels=0.00;FS=2.741;HRun=0;HaplotypeScore=0.0000;MQ=51.54;MQ0=0;MQRankSum=-0.473;QD=18.91;ReadPosRankSum=-2.109;SB=-245.55;SNPEFF_AMINO_ACID_CHANGE=L29Q;SNPEFF_CODON_CHANGE=cTg/cAg;SNPEFF_EFFECT=NON_SYNONYMOUS_CODING;SNPEFF_EXON_ID=exon_5_72362306_72362366;SNPEFF_FUNCTIONAL_CLASS=MISSENSE;SNPEFF_GENE_BIOTYPE=protein_coding;SNPEFF_GENE_NAME=psat1;SNPEFF_IMPACT=MODERATE;SNPEFF_TRANSCRIPT_ID=ENSDART00000023983
  #SNPEFF_AMINO_ACID_CHANGE=L29Q;SNPEFF_CODON_CHANGE=cTg/cAg;SNPEFF_EFFECT=NON_SYNONYMOUS_CODING;SNPEFF_EXON_ID=exon_5_72362306_72362366;SNPEFF_FUNCTIONAL_CLASS=MISSENSE;SNPEFF_GENE_BIOTYPE=protein_coding;SNPEFF_GENE_NAME=psat1;SNPEFF_IMPACT=MODERATE;SNPEFF_TRANSCRIPT_ID=ENSDART00000023983

  position = line[1].to_i
  link = make_link(position, chromosome)

  score = line[-1].to_f
  phast_cons = line[-2]
  phast_start = line[-4]
  phast_end = line[-3]
  info = line[7]
  allele_frequency = info.split("AF=")[-1].split(";")[0].to_f
  read_depth = info.split("DP=")[-1].split(";")[0].to_i
  impact = "-"
  impact = info.split("SNPEFF_IMPACT=")[-1].split(";")[0] if info.split("SNPEFF_IMPACT=").length > 1
  gene_name = "-"
  gene_name = info.split("SNPEFF_GENE_NAME=")[-1].split(";")[0].gsub(/Multi/,"(x of x)") if info.split("SNPEFF_GENE_NAME=").length > 1
  effect = "-"
  effect = info.split("SNPEFF_EFFECT=")[-1].split(";")[0] if info.split("SNPEFF_EFFECT=").length > 1
  snpeff_transcript_id = info.split("SNPEFF_TRANSCRIPT_ID=")[-1].split(";")[0]
  if snpeff_transcript_id =~ /^ENS/
    link_transcript_id = make_link_ensembl(snpeff_transcript_id)
  else
    link_transcript_id = make_link_refSeq(snpeff_transcript_id)
  end
  codon_change = "-"
  codon_change = info.split("SNPEFF_CODON_CHANGE=")[-1].split(";")[0] if effect == "NON_SYNONYMOUS_CODING"

  ### STATUS BAR
  puts position if position%5000 == 0
  ##############

  #if position >= 1000000
  #  break
  #end

  sample_genotypes = []
  sample_allele_depths = []
  sample_read_depth = []
  sample_genotypes_quality = []
  sample_likelihood = []
  control_numbers.each do |control_number|
    sample_info = line[control_number]
    sample_info = "-:-" if sample_info =~ /\.\/\./
    sample_info = sample_info.split(":")

    sample_genotypes << sample_info[0]
    sample_allele_depths << sample_info[1]
    sample_read_depth << sample_info[2].to_i
    sample_genotypes_quality << sample_info[3].to_f
    if sample_info[4]
      sample_likelihood << sample_info[4]
    else
      sample_likelihood << "-"
    end
  end
  ancestor_do_not_have_mutation = true
  sample_allele_depths.each do |sample_allele_depth|
    sample_allele_depth = sample_allele_depth.split(",")
    ancestor_do_not_have_mutation = false if
      sample_allele_depth[1].to_i >= sample_allele_depth[0].to_i
  end
  #puts target_fields.join(":")
  #puts line.join("\t")
  #puts sample_genotypes.join(":")
  next unless ancestor_do_not_have_mutation


  if (target_fields[0] =~ /1\/1/  && snp_unique?(target_fields[0],sample_genotypes,sample_genotypes_quality))
    #score = get_score(chromosome,position,seg)
    sheet1.row(i).default_format = Spreadsheet::Format.new :pattern => 1 , :pattern_fg_color => :green, :color => :white
    sheet1.update_row i, Spreadsheet::Link.new(link,chromosome), position, line[3],line[4], read_depth,  impact, effect, codon_change,Spreadsheet::Link.new(link_transcript_id,gene_name),phast_cons, phast_start,phast_end , score
    sheet1.row(i).push target_fields[0], target_fields[1], target_fields[2].to_i, target_fields[3].to_f
    sheet1.row(i).push sib_fields[0], sib_fields[1], sib_fields[2].to_i, sib_fields[3].to_f
    sample_genotypes.each_with_index do |genotype, index|
      sheet1.row(i).push genotype, sample_allele_depths[index], sample_read_depth[index].to_i, sample_genotypes_quality[index].to_f
    end

    i += 1

  #elsif (target_fields[0] =~ /1\/1/  && snp_unique?(target_fields[0],sample_genotypes,sample_genotypes_quality))
  ##elsif (sample_genotype[0] == "1/1" &&  !sample_genotype.values_at(1..-1).include?("1/1"))
  #  #score = get_score(chromosome,position,seg)
  #  sheet1.row(i).default_format = Spreadsheet::Format.new :pattern => 1 ,:pattern_fg_color => :orange, :color => :white
  #  sheet1.update_row i, Spreadsheet::Link.new(link,chromosome), position, line[3],line[4], read_depth,  impact, effect, codon_change,Spreadsheet::Link.new(link_transcript_id,gene_name),phast_cons, phast_start,phast_end , score
#
  #  sheet1.row(i).push target_fields[0], target_fields[1], target_fields[2], target_fields[3]
#
  #  sample_genotypes.each_with_index do |genotype, index|
  #    sheet1.row(i).push genotype, sample_allele_depth[index], sample_read_depth[index], sample_genotypes_quality[index]
  #  end
#
  #  i += 1
  elsif snp_unique?(target_fields[0],sample_genotypes,sample_genotypes_quality)
    #score = get_score(chromosome,position,seg)

    sheet1.update_row i, Spreadsheet::Link.new(link,chromosome), position, line[3],line[4], read_depth,  impact, effect, codon_change,Spreadsheet::Link.new(link_transcript_id,gene_name),phast_cons, phast_start,phast_end , score

    sheet1.row(i).push target_fields[0], target_fields[1], target_fields[2].to_i, target_fields[3].to_f
    sheet1.row(i).push sib_fields[0], sib_fields[1], sib_fields[2].to_i, sib_fields[3].to_f
    sample_genotypes.each_with_index do |genotype, index|
      sheet1.row(i).push genotype, sample_allele_depths[index], sample_read_depth[index].to_i, sample_genotypes_quality[index].to_f
    end
    i += 1
  end
end

book.write xls_doc
########