#!/usr/bin/env ruby
require 'csv'
require 'rsruby'

usage =<<EOF
      #{$0} affy_annot.csv prepared_affy_annot.csv
EOF

if ARGV.length != 2
  puts usage
  exit
end

# %w{ gene_chip_id probeset_name genechip_name species annotation_date sequence_type
# sequence_source transcript_id target_description representative_public_id
# archival_unigene_cluster unigene_id genome_version alignments gene_title gene_symbol
# chromosomal_location unigene_cluster_type ensembl entrez_gene swissprot ec omim
# refseq_protein_id refseq_transcript_id flybase agi wormbase mgi_name rgd_name
# sgd_accession_number go_biological_process go_cellular_component go_molecular_function
# pathway interpro trans_membrane qtl annotation_description annotation_transcript_cluster
# transcript_assignments annotation_notes }
CSV.open(ARGV[1], "wb") do |csv|
  CSV.foreach(ARGV[0],  {:headers => :first_row}) do |row|
    probeset_name = row["Probe Set ID"]
    genechip_name = row["GeneChip Array"]
    species = row["Species Scientific Name"]
    annotation_date = row["Annotation Date"]
    sequence_type = row["Sequence Type"]
    sequence_source = row["Sequence Source"]
    transcript_id = row["Transcript ID(Array Design)"]
    #gb:BC024686.1 /DB_XREF=gi:19354080 /FEA=FLmRNA /CNT=416 /TID=Mm.26422.1 /TIER=FL+Stack /STK=110 /UG=Mm.26422 /LL=54161 /UG_GENE=Copg1 /DEF=Mus musculus, coatomer protein complex, subunit gamma 1, clone MGC:30335 IMAGE:3992144, mRNA, complete cds. /PROD=coatomer protein complex, subunit gamma 1 /FL=gb:AF187079.1 gb:BC024686.1 gb:NM_017477.1 gb:BC024896.1
    helper = row["Target Description"].split(" /")
    if helper[10]
      target_description = helper[10].delete("DEF=")
    else
      target_description = "-"
    end
    representative_public_id = row["Representative Public ID"]
    archival_unigene_cluster = row["Archival UniGene Cluster"]
    unigene_id = row["UniGene ID"]
    genome_version = row["Genome Version"]
    alignments = row["Alignemts"]
    gene_title = row["Gene Title"]
    gene_symbol = row["Gene Symbol"]
    chromosomal_location = row["Chromosomal Location"]
    unigene_cluster_type = row["Unigene Cluster Type"]
    ensembl = row["Ensembl"]
    entrez_gene = row["Entrez Gene"]
    swissprot = row["SwissProt"]
    ec = row["EC"]
    omim = row["OMIM"]
    refseq_protein_id = row["RefSeq Protein ID"]
    refseq_transcript_id = row["RefSeq Transcript ID"]
    flybase = row["FlyBase"]
    agi = row["AGI"]
    wormbase = row["WormBase"]
    mgi_name = row["MGI Name"]
    rgd_name = row["RGD Name"]
    sgd_accession_number = row["SGD accession number"]
    go_biological_process = row["Gene Ontology Biological Process"]
    go_cellular_component = row["Gene Ontology Cellular Component"]
    go_molecular_function = row["Gene Ontology Molecular Function"]
    pathway = row["Pathway"]
    interpro = row["InterPro"]
    trans_membrane = row["Trans Membrane"]
    qtl = row["QTL"]
    annotation_description = row["Annotation Description"]
    annotation_transcript_cluster = row["Annotation Transcript Cluster"]
    transcript_assignments = row["Transcript Assignments"]
    annotation_notes = row["Annotation Notes"]
    csv << [probeset_name, genechip_name, species, annotation_date, sequence_type,
      sequence_source, transcript_id, target_description, representative_public_id,
      archival_unigene_cluster, unigene_id, genome_version, alignments, gene_title, gene_symbol,
      chromosomal_location, unigene_cluster_type, ensembl, entrez_gene, swissprot, ec, omim,
      refseq_protein_id, refseq_transcript_id, flybase, agi, wormbase, mgi_name, rgd_name,
      sgd_accession_number, go_biological_process, go_cellular_component, go_molecular_function,
      pathway, interpro, trans_membrane, qtl, annotation_description, annotation_transcript_cluster,
      transcript_assignments, annotation_notes]
  end
end