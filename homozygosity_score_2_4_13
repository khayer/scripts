#!/usr/bin/env ruby

usage =<<EOF

      #{$0} comb target control chrom

      ------------------------------------------------------
      * comb     :: combined_vcf
      * target   :: position in vcf file
      * control  :: position in vcf file (seperated by ,)
      * chrom    :: current chromosome
      ------------------------------------------------------

      - VERSION 2/4/2013 -----------------------------------

      ------------------------------------------------------
      Homozygosity Score is definied as:
      total # of bases examined / total # bases on chromosome
      in a 1MB window

      control for Wik and TLF (background strands) only!

      format out:

      position score
      ...
      500000 50
      500001 50
      500002 51
      ...

                                                       by khayer

EOF

# Functions:
def snp_exist?(info)
  !(info =~ /\.\/\./) && !(info =~ /0\/0/)
end

def snp_homo?(info)
  (info =~ /0\/0/) || (info =~ /1\/1/) || (info =~ /2\/2/) || (info =~ /3\/3/)
end

# _ Main _:
if ARGV.length != 4
  puts usage
  exit
end

combined_vcf = ARGV[0]
target_pos = ARGV[1].to_i + 8
control_positions = ARGV[2].split(",").map {|ele| ele.to_i + 8}
current_chromosome = ARGV[3]

window_size = 660000
window_first = 0
window_second = -window_size/2


all_snps_first_window = 0
all_snps_second_window = 0
homozygous_snps_first_window = 0
homozygous_snps_second_window = 0
dummy = false
positions = Array.new
homozygous = Array.new
total_bases_examined = 0

chr_lengths = Hash.new()

File.open(combined_vcf).each do |line|
  if line =~ /ID=chr/
    leng = line.split("=")[-1].split(">")[0].to_i
    chr = line.split("=")[-2].split(",")[0]
    chr_lengths[chr] = leng
  end
  next if line =~ /^#/  # getting rid of header lines
  line.chomp!

  line = line.split("\t")
  target_info = line[target_pos]
  next unless snp_exist?(target_info)
  tlf_info = line[control_positions[0]]
  wik_info = line[control_positions[1]]

  next unless snp_homo?(tlf_info) && snp_homo?(wik_info)
  next unless tlf_info.split(":")[3].to_i >= 25 && wik_info.split(":")[3].to_i >= 25
  next if tlf_info.split(":")[0] == wik_info.split(":")[0]


  #next unless snp_homo?(target_info)
  target_info = target_info.split(":")
  next unless target_info[2].to_f > 5.0
  target_genotype = target_info[0]

  if snp_homo?(target_info[0])
    homozygous_snps_first_window += 1
    homozygous_snps_second_window += 1
  end

  all_snps_first_window += 1
  all_snps_second_window += 1

  position = line[1].to_i
  state = "nothing"
  if position > window_second
    state = "second_done"
  end
  if position > window_first
    state = "first_done"
  end

  case state
   when "second_done"
    if dummy
      #ratio = ( homozygous_snps_second_window.to_f / ( all_snps_second_window.to_f / window_size.to_f ))
      #puts "#{window_second}\t#{ratio}"
      positions << window_second
      homozygous << homozygous_snps_second_window
      homozygous_snps_second_window = 0
      all_snps_second_window = 0
      window_second += window_size
    else
      window_second += window_size
      homozygous_snps_second_window = 0
      all_snps_second_window = 0
      dummy = true
    end
   when "first_done"
    #ratio = ( homozygous_snps_first_window.to_f / ( all_snps_first_window.to_f / window_size.to_f ))
    #puts "#{window_first}\t#{ratio}"
    positions << window_first
    homozygous << homozygous_snps_first_window
    total_bases_examined += all_snps_first_window
    homozygous_snps_first_window = 0
    all_snps_first_window = 0
    window_first += window_size
   end
end

total_number_of_bases_in_chromosome = chr_lengths[current_chromosome]

positions.each_with_index do |pos,i|
  ratio = homozygous[i].to_f * total_bases_examined.to_f/total_number_of_bases_in_chromosome.to_f
  puts "#{pos}\t#{ratio}"
end

