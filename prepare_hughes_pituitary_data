#!/usr/bin/env ruby
require 'csv'
require 'rsruby'

usage =<<EOF
      #{$0} hughes.csv prepared_hughes.csv
EOF

if ARGV.length != 2
  puts usage
  exit
end
# func.start
####################################################
R = RSRuby.instance()
R.eval_R("curveFitting <- function(numbers,time) {
  library(pracma)
  ts  <- seq(0, 2*pi, len=time)
  xs6 <- trigApprox(ts, numbers, 12)
}")
R.eval_R("scaleData <- function(x) {
  k = (x-min(x))/(max(x)-min(x))*100
  k/100 * 90 + 5
}")

#as.vector(round(scale(d, F, mx) * 100 ))
R.eval_R("avgData <- function(d) {
  dd <- filter(d,rep(0.33,3))
  dd[1] <- d[1]
  dd[length(dd)] <- d[length(d)]
  dd
}")
####################################################
# func.end
out = File.new(ARGV[1],"w")

CSV.foreach(ARGV[0],  {:headers => :first_row}) do |row|
  numbers = []
  time_points = []
  for i in 18..65
    numbers << row["PituitaryJH#{i}CEL"].to_f
    time_points << i
  end
  time = 65-18 + 1
  fitted = R.curveFitting(numbers,time)
  max = R.max(fitted,numbers).to_i
  min = R.min(fitted,numbers).to_i
  mid = R.mean(fitted).to_i
  scaled = R.scaleData(numbers).map {|e| e.to_i }
  #averaged = R.scaleData(fitted).map {|e| e.to_i }
  averaged = R.avgData(scaled).map {|e| e.to_i }
  cubase = "http://chart.apis.google.com/chart?chs=%sx%s&cht=lc&chxt=x,y&chxl=0:|18||||||24||||||30||||||36||||||42||||||48||||||54||||||60|||||65||1:|#{min}|#{mid}|#{max}|&chxp=1,2,50,97&chxr=0,18,66&chls=0,0,0|2,1,0&chf=c,ls,0,CCCCCC,0.125,FFFFFF,0.25,CCCCCC,0.25,FFFFFF,0.25,CCCCCC,0.125&chd=t:#{scaled.join(",")}|#{averaged.join(",")}&chm=o,555555,0,-1,5"
  #out.puts row["Probe Set"] +"|"+ numbers.join(",") + "|" + dp_s.join(",")
  out.puts row["Probe Set"] +"@"+time_points.join(",")+"@"+numbers.join(",")+"@"+cubase
end