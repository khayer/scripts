#!/usr/bin/env ruby

usage =<<EOF

  #{$0} combined.vcf parents.vcf target_pos mut_strand_pos wt_strand_pos
 -----------------------------------------
  Mapping Score is definied as:
    C / (B*D)
    #A = homozygous all
    B = heterozygous all
    C = homozygous_unique tue
    D = homozygous_unique ab
    in a 50kB window

  format out:

  position score
  ...
  500000 50
  500001 50
  500002 51
  ...
EOF

# Functions:

def mapping_score(number_homo, number_hetero,number_mutation_strand,
  number_wt_strand)
  number_hetero = 1 if number_hetero == 0
  number_wt_strand = 1 if number_wt_strand == 0
  #(number_homo.to_f/number_hetero.to_f)* (number_mutation_strand.to_f / number_wt_strand.to_f)
  number_mutation_strand.to_f / (number_hetero.to_f* number_wt_strand.to_f)
end

def snp_exist?(info)
  !(info =~ /\.\/\./) && !(info =~ /0\/0/)
end

def snp_homo?(info)
  (info =~ /1\/1/) || (info =~ /2\/2/) || (info =~ /3\/3/)
end

def snp_unique?(parent_info, total_number)
  homozygous = Array.new(5,0)
  parent_info.each do |key,info|
    info = info.split(":")
    homozygous[key] = 1 if snp_homo?(info[0]) && info[3].to_f > 5.0
  end
  if homozygous.index(1) == homozygous.rindex(1) && homozygous.index(1) != nil
    total_number[homozygous.index(1)] += 1
  end
  return total_number, homozygous
end

# _ Main _:
if ARGV.length != 5
  puts usage
  exit
end

combined_vcf = ARGV[0]
parent_vcf = ARGV[1]
target_pos = ARGV[2].to_i + 8
mut_strand_pos = ARGV[3].to_i + 8
wt_strand_pos = ARGV[4].to_i + 8
#reference_pos = ARGV[5].to_i + 8
i = 0
mut = 0
wik = 0
sample = 0
doubled = 0
window_size = 100000
window_first = window_size
window_second = window_size/2

handle_parent = File.open(parent_vcf)
line_parent = handle_parent.readline()
while line_parent =~ /^#/
  line_parent = handle_parent.readline().chomp()
end
total_number = Array.new(5,0)
line_parent = line_parent.split("\t")

number_homo_first_window = 0
number_homo_second_window = 0
number_hetero_first_window = 0
number_hetero_second_window = 0
number_mut_strand_first_window = 0
number_mut_strand_second_window = 0
number_wt_strand_first_window = 0
number_wt_strand_second_window = 0

dummy = false
state = "nothing"
File.open(combined_vcf).each do |line|
  next if line =~ /^#/
  line.chomp!
  line = line.split("\t")
  target_info = line[target_pos]
  next if target_info =~ /\.\/\./
  next if target_info =~ /0\/0/
  target_info = target_info.split(":")
  next if target_info[2].to_i < 10
  next if target_info[3].to_i < 40
  target_info.join("\t")
  sample += 1
  #exit if sample == 500
  #mut_stand_info = line[mut_strand_pos]
  #wt_strand_info = line[wt_strand_pos]
  position = line[1].to_i
  #reference_info = line[reference_pos]
  #if snp_homo?(target_info[0]) && snp_homo?(reference_info)
  #  reference_info = reference_info.split(":")
  #  if reference_info[3].to_f > 40
  #    doubled += 1
  #    next
  #  end
  #end
  # Compare position
  while line_parent[1].to_i < line[1].to_i
    line_parent = handle_parent.readline().chomp().split("\t")
  end
  homozygous = Array.new(5,0)




  if snp_homo?(target_info[0])
    total_number[0] += 1

    if line_parent[1].to_i == line[1].to_i
      parent_info = Hash.new
      (9..12).each do  |i|
        next if !snp_exist?(line_parent[i])
        parent_info.store(i-8,line_parent[i])
      end
      total_number, homozygous = snp_unique?(parent_info, total_number)
    end


  end

  #puts total_number.join("\t")
  #puts homozygous.join("\t")
  #exit



  if position > window_second
    state = "second_done"
  end
  if position > window_first
    state = "first_done"
  end



  case state
   when "second_done"
    i = i+1


    score = mapping_score(number_homo_second_window.to_f,
      number_hetero_second_window.to_f, number_mut_strand_second_window.to_f,
      number_wt_strand_second_window.to_f)

    number_homo_second_window = 0
    number_hetero_second_window = 0
    number_mut_strand_second_window = 0
    number_wt_strand_second_window = 0

    if dummy
      puts "#{window_second}\t#{score}"
      window_second +=window_size

    else
      window_second +=window_size
      dummy = true
    end

   when "first_done"
    i = 0
     score = mapping_score(number_homo_first_window.to_f,
      number_hetero_first_window.to_f, number_mut_strand_first_window.to_f,
      number_wt_strand_first_window.to_f)

    number_homo_first_window = 0
    number_hetero_first_window = 0
    number_mut_strand_first_window = 0
    number_wt_strand_first_window = 0
    puts "#{window_first}\t#{score}"
    window_first += window_size
    #exit
   end
  state = "nothing"


  if snp_homo?(target_info[0]) #&& !homozygous.include?(1)
    #total_number[0] += 1
    number_homo_first_window += 1
    number_homo_second_window += 1
  end
  #if snp_homo?(target_info[0]) && homozygous[wt_strand_pos-8] == 1 && homozygous.index(1) == homozygous.rindex(1)
  if homozygous[wt_strand_pos-8] == 1 && homozygous.index(1) == homozygous.rindex(1)
  #if (wt_strand_info =~ /1\/1/ || wt_strand_info =~ /2\/2/) && wt_strand_info.split(":")[3].to_i > 25
    number_wt_strand_first_window += 1
    number_wt_strand_second_window += 1
    wik += 1
  #elsif snp_homo?(target_info[0]) && homozygous[mut_strand_pos-8] == 1 && homozygous.index(1) == homozygous.rindex(1)
  elsif homozygous[mut_strand_pos-8] == 1 && homozygous.index(1) == homozygous.rindex(1)
    #if (mut_stand_info =~ /1\/1/ || mut_stand_info =~ /2\/2/) && mut_stand_info.split(":")[3].to_i > 25
      number_mut_strand_first_window += 1
      number_mut_strand_second_window += 1
      mut += 1
  elsif !snp_homo?(target_info[0]) && !homozygous.include?(1)
    number_hetero_first_window += 1
    number_hetero_second_window += 1
  end


  #STDERR.puts wt_strand_info + "\t" + number_wt_strand_first_window.to_s
  #STDERR.puts mut_stand_info + "\t" + number_mut_strand_first_window.to_s

end

STDERR.puts "Wik: #{wik}    TLF: #{mut}   Sample: #{sample}"
STDERR.puts total_number.join(":")
STDERR.puts doubled